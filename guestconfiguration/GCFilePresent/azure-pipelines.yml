trigger:
  branches:
    include:
    - main
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  sourceFolderName: source
  defaultBranch: main
  Agent.Source.Git.ShallowFetchDepth: 0 # override ShallowFetchDepth

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
          - task: PowerShell@2
            name: Exp_Feature
            displayName: 'Enable Experimental features'
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                 ./build.ps1 -Tasks noop -ResolveDependency
                  Import-Module GuestConfiguration
                  Enable-ExperimentalFeature -Name GuestConfiguration.Pester
                  Enable-ExperimentalFeature -Name GuestConfiguration.SetScenario
                  Enable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource -ErrorAction SilentlyContinue
            env:
              ModuleVersion: $(gitVersion.NuGetVersionV2)
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      # If several pipeline jobs are running test, consider renaming this job:
      - job: Test_Unit
        displayName: 'Unit'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              # If several pipeline jobs are generating test result, consider renaming this title:
              testRunTitle: 'Unit'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)
              # If several pipeline jobs are generating code coverage, replace above with this:
              #artifactName: 'CodeCoverageWindows' # Can be any, in the pipeline, unique name
              parallel: true

      # If several pipeline jobs should run unit tests, uncomment this:
      ## If several pipeline jobs are generating test result consider renaming this:
      #- job: Test_Unit_Linux
      #  displayName: 'Unit Linux'
      #  pool:
      #    vmImage: 'ubuntu-latest'
      #  timeoutInMinutes: 0
      #  steps:
      #    - task: DownloadPipelineArtifact@2
      #      displayName: 'Download Build Artifact'
      #      inputs:
      #        buildType: 'current'
      #        artifactName: $(buildArtifactName)
      #        targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
      #    - task: PowerShell@2
      #      name: test
      #      displayName: 'Run Unit Test'
      #      inputs:
      #        filePath: './build.ps1'
      #        arguments: "-Tasks test -PesterScript 'tests/Unit'"
      #        pwsh: true
      #    - task: PublishTestResults@2
      #      displayName: 'Publish Test Results'
      #      condition: succeededOrFailed()
      #      inputs:
      #        testResultsFormat: 'NUnit'
      #        testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
      #        # If several pipeline jobs are generating test result consider renaming this:
      #        testRunTitle: 'Unit Linux'
      #    - task: PublishPipelineArtifact@1
      #      displayName: 'Publish Test Artifact'
      #      inputs:
      #        targetPath: '$(buildFolderName)/$(testResultFolderName)/'
      #        # If several pipeline jobs are generating code coverage, consider renaming this:
      #        artifactName: 'CodeCoverageLinux' # Can be any, in the pipeline, unique name
      #        parallel: true

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'joxz')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: main
              MainGitBranch: main
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: main
              MainGitBranch: main

